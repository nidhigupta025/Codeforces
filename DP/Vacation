1. Bottom up

#include <bits/stdc++.h>
using namespace std;
#define lli long long int
int main() 
{ 
  lli n;
  cin>>n;
  lli a[n],b[n],c[n];
  for(lli i=0;i<n;i++)
  {
      cin>>a[i];  cin>>b[i];  cin>>c[i];
  }
  lli dp[n][3];
  memset(dp,-1,sizeof(dp));
  dp[n-1][0]=a[n-1],dp[n-1][1]=b[n-1],dp[n-1][2]=c[n-1];
  for(lli i=n-2;i>=0;i--)
  {
      dp[i][0]=a[i]+max(dp[i+1][1],dp[i+1][2]);
      dp[i][1]=b[i]+max(dp[i+1][0],dp[i+1][2]);
      dp[i][2]=c[i]+max(dp[i+1][0],dp[i+1][1]);
  }
  lli ans=max(max(dp[0][0],dp[0][1]),dp[0][2]);
  cout<<ans;
}

2. Recursion + memoization
#include <bits/stdc++.h>
using namespace std;
long long int a[100000],b[100000],c[100000],dp[100005][3],n;
long long int solve(int idx,int previousday)
{
    if(idx==n)
    return 0;
 
    if(dp[idx][previousday]!=-1)
    return dp[idx][previousday];
    
    long long int ans=INT_MIN;
    if(previousday==0)
    {
         ans=max(ans,b[idx]+solve(idx+1,1));
         ans=max(ans,c[idx]+solve(idx+1,2));
    }
    else if(previousday==1)
    {
         ans=max(ans,a[idx]+solve(idx+1,0));
         ans=max(ans,c[idx]+solve(idx+1,2));
    }
    else if(previousday==2)
    {
         ans=max(ans,a[idx]+solve(idx+1,0));
         ans=max(ans,b[idx]+solve(idx+1,1));
    }
    else
    {
         ans=max(ans,a[idx]+solve(idx+1,0));
         ans=max(ans,b[idx]+solve(idx+1,1));
         ans=max(ans,c[idx]+solve(idx+1,2));
    }
    dp[idx][previousday]=ans;
    return ans;
}
int main() 
{
  cin>>n;
  
  for(int i=0;i<n;i++)
  {
      cin>>a[i];  cin>>b[i];  cin>>c[i];
  }
  memset(dp,-1,sizeof(dp));
  cout<<solve(0,3);
}
